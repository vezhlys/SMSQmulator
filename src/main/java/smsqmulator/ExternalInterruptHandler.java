package smsqmulator;

/**
 * A simple interface for external interrupt handlers.
 * They "generate" the interrupt after doing what needs to be done.
 * <p>
 * The CPU <b>SHOULD </b>do the following :
 * <p>
 * It checks whether the handler has signaled an interrupt (by calling the CPU's  <code>generateInterrupt</code> method.
 * If so, the CPU calls the handler's <code>handleExternalInterrupt</code> method. this can do anything it wants, but should raise
 * the corresponding exception, so that SMSQE's interrupt servicing routine gets called.
 * 
 * The CPU <b>actually does</b> the following :
 * <p>
 * The CPU calls the handler's <code>handleExternalInterrupt</code> method. This should check whether a interrupt is generated by it
 * If yes, the method can do anything it wants, but should raise the corresponding exception, so that SMSQE's interrupt servicing routine gets called.
 * 
 * @author and copyright (c) 2012 Wolfgang Lenerz
 */
public interface ExternalInterruptHandler
{
    
    /**
     * Handles the interrupt this handler is responsible for.
     * This can do anything it wants, but should raise the corresponding exception, so that SMSQE's interrupt servicing routine gets called.
     * @param cpu the CPU.
     */
    public void handleExternalInterrupt(smsqmulator.cpu.MC68000Cpu cpu);
    
    /**
     * This sets a special address for the interrupt handler.
     * What the handler does with this is left to itself.
     * Notionally, this is to give the handler a memory address that it can write to, e.g. to set the data for a real time clock.
     * @param address 
     */
 //   public void setTimeAddress(int address);
    
    
    /**
     * This must stop the interrupt handler, and remove any reference to the cpu.
     */
    public void removeHandler();
}
